  /*
  This file is part of "GMP Clearview" package.
  Copyright (C)  2025 Infotrust 
  Alina Zilbergerts, Trish Dothkar,
  -- */

config {
  type: "incremental",
  tags: [dataform.projectConfig.vars.GA4_DATASET,"base_events","dev"],
  description: "Output events table: unnested, cleaned, clustered data with several fixes",
  database: dataform.projectConfig.vars.OUTPUT_PROJECT,
  schema: dataform.projectConfig.vars.TRANSFORMATIONS_DATASET,
  name: "test",
  // bigquery: {
  //   partitionBy: "event_date",
  //-   clusterBy: ["event_name", "session_id"]
  // }
}



js {
  const { helpers } = require("includes/core/helpers");
  const config = helpers.getConfig();
  /* check if there's invalid columns or dupe columns in the custom column definitions */
  helpers.checkColumnNames(config);
  const fieldnames_sql = helpers.getEventParamKeysArray(config, ref("events_fresh_*"), "event_params");
  const base_tbl = self();
  const json_custom_params = 'SELECT CONCAT("[", STRING_AGG(json_data, ","), "]") \
FROM (SELECT TO_JSON_STRING(JSON_OBJECT("name", name, "type", type)) AS json_data \
      FROM sallybeauty-us-ga4.gmp_base.event_params GROUP BY name, type)';
}
/* incrementality */
pre_operations {
  declare ev_params string default ( ${fieldnames_sql}); 


}
DECLARE  fieldnames STRING DEFAULT (${fieldnames_sql}); 
 select ev_params
-- with step1 as (
--  select * from 
--  (
--   select
--     parse_date('%Y%m%d',event_date) as event_date,
--     event_timestamp,
--     event_name,
-- ep.key param_name,
--     coalesce(ep.value.string_value, CAST(ep.value.int_value AS STRING),
--     CAST(ep.value.float_value AS STRING), CAST(ep.value.double_value AS STRING)) as param_value
    
--     from ${ref("events_fresh_*")}, UNNEST(event_params) ep
--     WHERE _TABLE_SUFFIX >='20250601'
--  )
   
--     `${helpers.getSqlPivotEventParams((select ev_params))} `

-- ) 

-- select * from step1

